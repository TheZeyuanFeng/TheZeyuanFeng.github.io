<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://thezeyuanfeng.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://thezeyuanfeng.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-01-26T17:42:46-05:00</updated><id>https://thezeyuanfeng.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Convex Optimization Ch.1</title><link href="https://thezeyuanfeng.github.io/blog/2023/convex_chapter1/" rel="alternate" type="text/html" title="Convex Optimization Ch.1"/><published>2023-01-24T20:09:00-05:00</published><updated>2023-01-24T20:09:00-05:00</updated><id>https://thezeyuanfeng.github.io/blog/2023/convex_chapter1</id><content type="html" xml:base="https://thezeyuanfeng.github.io/blog/2023/convex_chapter1/"><![CDATA[<h5 id="introduction"><strong>Introduction</strong></h5> <p>This blog series aims to provide a clear, yet conprehensive note about convex optization based on the ESE 605 course material at UPenn. The goal is that after reading this blog, the readers would be able to</p> <ul> <li>recognize and formulate problems as convex optimization problems</li> <li>develop code for problems of moderate size</li> <li>characterize optimal solution, give limits of performance, etc.</li> </ul> <p>The following topics are included</p> <ul> <li>convex sets, functions, optimization problems</li> <li>examples and applications</li> <li>algorithms</li> </ul> <h6 id="canonical-form-of-convex-optimization"><strong>Canonical form of convex optimization</strong></h6> <p> $$\begin{array}{ll} \operatorname{minimize} \ f_0(x) \\ \text { subject to } f_i(x) \leq b_i, \quad i=1, \ldots, m \end{array}$$ </p> <ul> <li> <p> where objective and constraint functions are convex $$ \newline f_i(\alpha x+\beta y)\leq \alpha f_i(X)+\beta f_i(y)) $$ </p> <p>if \(\alpha+\beta=1,\alpha\geq 0, \beta \geq 0\)</p> </li> </ul> <h5 id="convex-sets"><strong>Convex sets</strong></h5> <p>For the following definitions, click to expand</p> <details> <summary> Lines <span class="icon">ðŸ‘‡</span> </summary> all points through x<sub>1</sub>, x<sub>2</sub> <p> $$\{x \mid x=\theta x_1+(1-\theta) x_2 , \ \theta \in \mathcal{R} \}$$ </p> </details> <details> <summary> Affine set <span class="icon">ðŸ‘‡</span> </summary> contains the line through any two distinct points in the set. <p> Every affine set can be expressed as solution set of system of linear equations example : solution set of linear equations $$\{x \mid A x=b\}$$ </p> </details> <details> <summary> Line segment <span class="icon">ðŸ‘‡</span> </summary> all points between x<sub>1</sub>, x<sub>2</sub> <p> $$\{x \mid x=\theta x_1+(1-\theta) x_2 , \ \theta \in [0,1] \}$$ </p> </details> <details> <summary> Convex set <span class="icon">ðŸ‘‡</span> </summary> contains line segment between any two points in the set <p> $$x_1, x_2 \in C, \quad 0 \leq \theta \leq 1 \quad \Longrightarrow \quad \theta x_1+(1-\theta) x_2 \in C$$ Examples: </p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/ConvexOptimization/ch1/convex_set_eg.png" class="img-fluid rounded z-depth-1" width="500" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> </details> <p>A convex set can be represented by convex combination</p> <details> <summary> Convex combination and convex hull <span class="icon">ðŸ‘‡</span> </summary> convex combination of x<sub>1</sub>, ..., x<sub>k</sub> includes any point x of the form <p> $$x=\theta_1 x_1+\theta_2 x_2+\cdots+\theta_k x_k$$ </p> with $$\theta_1+\cdots+\theta_k=1, \theta_i \geq 0$$ <p> convex hull conv(<i>S</i>) is the set of all convex combinations of points in <i>S</i> </p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/ConvexOptimization/ch1/convex_hull_eg.png" class="img-fluid rounded z-depth-1" width="500" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> </details>]]></content><author><name></name></author><category term="math"/><category term="blogs"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">a post with code</title><link href="https://thezeyuanfeng.github.io/blog/2015/code/" rel="alternate" type="text/html" title="a post with code"/><published>2015-07-15T11:09:00-04:00</published><updated>2015-07-15T11:09:00-04:00</updated><id>https://thezeyuanfeng.github.io/blog/2015/code</id><content type="html" xml:base="https://thezeyuanfeng.github.io/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>